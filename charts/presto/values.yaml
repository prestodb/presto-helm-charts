# Default values for presto

image:
  repository: prestodb/presto
  pullPolicy: IfNotPresent
  tag: ~

imagePullSecrets: []

service:
  type: ClusterIP
  port: 8080
  nodePort: ~
  labels: {}
  annotations: {}

ingress:
  enabled: false
  labels: {}
  annotations: {}
  ingressClassName: ~
  tls: []
  host: presto.local
  path: /
  pathType: Prefix

serviceAccount:
  create: true
  name: ~
  labels: {}
  annotations: {}

# Common environment variables (templated)
env: []
# Common envFrom items to set up environment variables (templated)
envFrom: []

# Additional common volumes (templated)
volumes: []
# Additional common volumeMounts (templated)
volumeMounts: []

# Additional common init containers (templated)
initContainers: []
# Additional common containers (templated)
containers: []

# Constrain all presto pods to nodes with specific node labels
nodeSelector: {}
# Constrain all presto pods to nodes by affinity/anti-affinity rules
affinity: {}
# Allow to schedule all presto pods on nodes with matching taints
tolerations: []

# Security context by default
securityContext: {}

# Presto home directory
home: /opt/presto-server

# Deployment mode
# single - Minimal Presto deployment where single pod acts as Coordinator and Worker
# cluster - Standard Presto deployment with one Coordinator and multiple Workers
# ha-cluster - Highly available Presto deployment with multiple Resource Managers, Coordinators and Workers
mode: cluster

# Common node properties, see https://prestodb.io/docs/current/installation/deployment.html#node-properties
node:
  location: presto.local
  environment: development
  dataDir: /var/presto/data

# Common JVM options, see https://prestodb.io/docs/current/installation/deployment.html#jvm-config
jvm: |-
  -server
  -XX:+ExitOnOutOfMemoryError
  -Djdk.attach.allowAttachSelf=true

# Common configuration properties, see https://prestodb.io/docs/current/installation/deployment.html#config-properties
config: |-
  query.max-memory=1GB
  query.max-memory-per-node=512MB

# Common log-levels properties, see https://prestodb.io/docs/current/installation/deployment.html#log-levels
log: |-
  com.facebook.presto=INFO

run_coordinator: |-
  #!/bin/bash
  yum install -y python3-pip
  pip3 install awscli --upgrade
  export AWS_REGION=us-west-2
  aws s3 cp s3://data-emr-pmi/ranger_jars/auth/nb-presto-auth.tar.gz .
  tar zxf nb-presto-auth.tar.gz
  # your commands here
  #
  $PRESTO_HOME/bin/launcher run

password_authenticator: |-
  password-authenticator.name=nb-password-authenticator
  file.password-file=/etc/ranger/auth/password-auth.properties

resource_groups_properties: |-
  resource-groups.configuration-manager=file
  resource-groups.config-file=/usr/lib/presto/etc/resource_groups.json

resource_groups_json: |-
  {
        "rootGroups": [{
          "name": "global",
          "softMemoryLimit": "100%",
          "hardConcurrencyLimit": 2,
          "maxQueued": 100,
          "schedulingPolicy": "weighted",
          "jmxExport": true,
          "subGroups": [{
              "name": "nova",
              "softMemoryLimit": "80%",
              "hardConcurrencyLimit": 1,
              "maxQueued": 50,
              "schedulingWeight": 10,
              "jmxExport": true
            }, {
              "name": "growth",
              "softMemoryLimit": "20%",
              "hardConcurrencyLimit": 1,
              "maxQueued": 50,
              "schedulingWeight": 10,
              "jmxExport": true
            },
            {
              "name": "admin",
              "softMemoryLimit": "80%",
              "hardConcurrencyLimit": 1,
              "maxQueued": 50,
              "schedulingWeight": 10,
              "jmxExport": true
            },
            {
              "name": "test",
              "softMemoryLimit": "20%",
              "hardConcurrencyLimit": 1,
              "maxQueued": 50,
              "schedulingWeight": 10,
              "jmxExport": true
            }
          ]
        }, {
          "name": "admin",
          "softMemoryLimit": "100%",
          "hardConcurrencyLimit": 10,
          "maxQueued": 50,
          "schedulingPolicy": "query_priority",
          "jmxExport": true
        }],
        "selectors": [{
            "user": "nova",
            "group": "global.nova"
          },
          {
            "user": "nova_group",
            "group": "global.nova"
          },
          {
            "user": "growth",
            "group": "global.growth"
          },
          {
            "user": "growth_group",
            "group": "global.growth"
          },
          {
            "user": "hadoop",
            "group": "global.admin"
          },
          {
            "group": "global.test"
          }
        ],
        "cpuQuotaPeriod": "1h"
      }

  # Resource Manager configuration
resourceManager:
  # Number of resource managers in "ha-cluster" mode
  replicas: 1
  # Resource manager JVM options (overwrites common JVM options)
  jvm: ""
  # Command to launch resource manager (templated)
  command: ["sh", "-c", "$PRESTO_HOME/bin/launcher run"]
  # Arguments to launch resource manager (templated)
  args: ~
  # Additional resource manager environment variables (templated)
  env: []
  # Additional resource manager envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional resource manager volumes (templated)
  volumes: []
  # Additional resource manager volumeMounts (templated)
  volumeMounts: []
  # Additional resource manager init containers (templated)
  initContainers: []
  # Additional resource manager containers (templated)
  containers: []
  # Resource manager liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Resource manager readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for resource manager
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Resource manager resource limits and requests
  resources: {}
  # Constrain resource manager pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain resource manager pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule resource manager pods on nodes with matching taints
  tolerations: []
  # Resource manager security context (overwrites default security context)
  securityContext: {}

# Coordinator configuration
coordinator:
  # Number of coordinators in "ha-cluster" mode
  replicas: 1
  # Coordinator JVM options (overwrites common JVM options)
  jvm: ""
  # Command to launch coordinator (templated)
  command: ["sh", "-c", "$PRESTO_HOME/bin/launcher run"]
  # Arguments to launch coordinator (templated)
  args: ~
  # Additional coordinator environment variables (templated)
  env: []
  # Additional coordinator envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional coordinator volumes (templated)
  volumes: []
  # Additional coordinator volumeMounts (templated)
  volumeMounts: []
  # Additional coordinator init containers (templated)
  initContainers: []
  # Additional coordinator containers (templated)
  containers: []
  # Coordinator liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Coordinator readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for coordinator
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Coordinator resource limits and requests
  resources: {}
  # Constrain coordinator pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain coordinator pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule coordinator pods on nodes with matching taints
  tolerations: []
  # Coordinator security context (overwrites default security context)
  securityContext: {}

# Worker configuration
worker:
  # Number of workers in "cluster" and "ha-cluster" modes
  replicas: 2
  # Worker JVM options (overwrites common JVM options)
  jvm: ""
  # Command to launch worker (templated)
  command: ["sh", "-c", "$PRESTO_HOME/bin/launcher run"]
  # Arguments to launch worker (templated)
  args: ~
  # Additional worker environment variables (templated)
  env: []
  # Additional worker envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional worker volumes (templated)
  volumes: []
  # Additional worker volumeMounts (templated)
  volumeMounts: []
  # Additional worker init containers (templated)
  initContainers: []
  # Additional worker containers (templated)
  containers: []
  # Worker liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Worker readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for worker
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Worker resource limits and requests
  resources: {}
  # Constrain worker pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain worker pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule worker pods on nodes with matching taints
  tolerations: []
  # Worker security context (overwrites default security context)
  securityContext: {}

# Catalogs
catalog: {}
#  jmx: |-
#    connector.name=jmx
#  tpch: |-
#    connector.name=tpch
#  tpcds: |-
#    connector.name=tpcds

# Metrics endpoint to export JMX metrics in Prometheus format
metrics:
  enabled: false
  port: 9090
  # Path to JMX exporter JAR file
  javaagent: /usr/lib/presto/utils/jmx_prometheus_javaagent-0.20.0.jar
  # JMX Exporter config, see https://github.com/prometheus/jmx_exporter#configuration for available options
  config:
    rules:
      - pattern: ".*"
