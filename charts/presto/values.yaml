# Default values for presto

image:
  repository: prestodb/presto
  pullPolicy: IfNotPresent
  tag: ~

imagePullSecrets: []

service:
  type: ClusterIP
  port: 8080
  nodePort: ~
  labels: {}
  annotations: {}

ingress:
  enabled: false
  labels: {}
  annotations: {}
  ingressClassName: ~
  tls: []
  host: presto.local
  path: /
  pathType: Prefix

serviceAccount:
  create: true
  name: ~
  labels: {}
  annotations: {}

# Annotations to add to each pod in every deployment
podAnnotations: {}
  #annotation-source-common: "true"
  #check-merge-overwrite: "common"

# Common environment variables (templated)
env: []
# Common envFrom items to set up environment variables (templated)
envFrom: []

# Additional common volumes (templated)
volumes: []
# Additional common volumeMounts (templated)
volumeMounts: []

# Additional common init containers (templated)
initContainers: []
# Additional common containers (templated)
containers: []

# Constrain all presto pods to nodes with specific node labels
nodeSelector: {}
# Constrain all presto pods to nodes by affinity/anti-affinity rules
affinity: {}
# Allow to schedule all presto pods on nodes with matching taints
tolerations: []

# Security context by default
securityContext: {}

# Presto home directory
home: /opt/presto-server

# Deployment mode
# single - Minimal Presto deployment where single pod acts as Coordinator and Worker
# cluster - Standard Presto deployment with one Coordinator and multiple Workers
# ha-cluster - Highly available Presto deployment with multiple Resource Managers, Coordinators and Workers
mode: cluster

# Common node properties, see https://prestodb.io/docs/current/installation/deployment.html#node-properties
node:
  id: ~
  location: presto.local
  environment: development
  dataDir: /var/presto/data

# Common JVM options, see https://prestodb.io/docs/current/installation/deployment.html#jvm-config
jvm: |-
  -server
  -XX:+ExitOnOutOfMemoryError
  -Djdk.attach.allowAttachSelf=true

# Common configuration properties, see https://prestodb.io/docs/current/installation/deployment.html#config-properties
config: |-
  query.max-memory=512MB
  query.max-memory-per-node=256MB

# Common log-levels properties, see https://prestodb.io/docs/current/installation/deployment.html#log-levels
log: |-
  com.facebook.presto=INFO

# Resource Manager configuration
resourceManager:
  # Resource manager JVM options (overwrites common JVM options)
  jvm: ""
  # Resource manager configuration properties (overwrites common config options)
  config: ~
  # Command to launch resource manager (templated)
  command: ~
  # Arguments to launch resource manager (templated)
  args: ~
  # Additional resource manager environment variables (templated)
  env: []
  # Additional resource manager envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional resource manager volumes (templated)
  volumes: []
  # Additional resource manager volumeMounts (templated)
  volumeMounts: []
  # Additional resource manager init containers (templated)
  initContainers: []
  # Additional resource manager containers (templated)
  containers: []
  # Resource manager liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Resource manager readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for resource manager
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Resource manager resource limits and requests
  resources: {}
  # Constrain resource manager pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain resource manager pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule resource manager pods on nodes with matching taints
  tolerations: []
  # Resource manager security context (overwrites default security context)
  securityContext: {}
  # Annotations to add to resource manager pods
  podAnnotations: {}
    #annotation-source-resource-manager: "true"
    #check-merge-overwrite: "resource-manager"

# Coordinator configuration
coordinator:
  # Number of coordinators in "ha-cluster" mode
  replicas: 1
  # Coordinator JVM options (overwrites common JVM options)
  jvm: ""
  # Coordinator configuration properties (overwrites common config options)
  config: ~
  # Command to launch coordinator (templated)
  command: ~
  # Arguments to launch coordinator (templated)
  args: ~
  # Additional coordinator environment variables (templated)
  env: []
  # Additional coordinator envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional coordinator volumes (templated)
  volumes: []
  # Additional coordinator volumeMounts (templated)
  volumeMounts: []
  # Additional coordinator init containers (templated)
  initContainers: []
  # Additional coordinator containers (templated)
  containers: []
  # Coordinator liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Coordinator readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for coordinator
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Coordinator resource limits and requests
  resources: {}
  # Constrain coordinator pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain coordinator pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule coordinator pods on nodes with matching taints
  tolerations: []
  # Coordinator security context (overwrites default security context)
  securityContext: {}
  # Annotations to add to coordinator pods
  podAnnotations: {}
    #annotation-source-coordinator: "true"
    #check-merge-overwrite: "coordinator"

# Worker configuration
worker:
  # Number of workers in "cluster" and "ha-cluster" modes
  replicas: 2
  # Worker JVM options (overwrites common JVM options)
  jvm: ""
  # Worker configuration properties (overwrites common config options)
  config: ~
  # Command to launch worker (templated)
  command: ~
  # Arguments to launch worker (templated)
  args: ~
  # Additional worker environment variables (templated)
  env: []
  # Additional worker envFrom items to set up environment variables (templated)
  envFrom: []
  # Additional worker volumes (templated)
  volumes: []
  # Additional worker volumeMounts (templated)
  volumeMounts: []
  # Additional worker init containers (templated)
  initContainers: []
  # Additional worker containers (templated)
  containers: []
  # Worker liveness probe
  livenessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Worker readiness probe
  readinessProbe:
    initialDelaySeconds: 45
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 3
    successThreshold: 1
  # Deployment configuration for worker
  deployment:
    strategy:
      type: Recreate
    revisionHistoryLimit: 3
  # Worker resource limits and requests
  resources: {}
  # Constrain worker pods to nodes with specific node labels
  nodeSelector: {}
  # Constrain worker pods to nodes by affinity/anti-affinity rules
  affinity: {}
  # Allow to schedule worker pods on nodes with matching taints
  tolerations: []
  # Worker security context (overwrites default security context)
  securityContext: {}
  # Annotations to add to worker pods
  podAnnotations: {}
    #annotation-source-worker: "true"
    #check-merge-overwrite: "worker"
  
# Enables Presto to use C++ based workers  
prestoCpp: 
  enabled: false
  # Image details for Presto C++ workers (overrides common image details)
  image:
    repository: prestodb/presto-native
    pullPolicy: IfNotPresent
    tag: ~

# Catalogs
catalog: {}
#  jmx: |-
#    connector.name=jmx
#  tpch: |-
#    connector.name=tpch
#  tpcds: |-
#    connector.name=tpcds

# Resource Groups, see https://prestodb.io/docs/current/admin/resource-groups.html
resourceGroups:
  # Configuration manager name (file or db), i.e. "resource-groups.configuration-manager" value
  manager: ~
  # File-Based Resource Management config, see https://prestodb.io/docs/current/admin/resource-groups.html#file-resource-group-manager
  file:
    # Configuration to be used as a resource-groups.json file, see example https://prestodb.io/docs/current/admin/resource-groups.html#id2
    config: |-
      {
        "rootGroups": [
          {
            "name": "global",
            "softMemoryLimit": "100%",
            "hardConcurrencyLimit": 100,
            "maxQueued": 500
          }
        ],
        "selectors": [
          {
            "group": "global"      
          }
        ]
      }
    # Existing ConfigMap with 'resource-groups.json' key to be used as a configuration file (has higher priority over "config" property)
    fromConfigMap: ~
  # Database-Based Resource Management config, see https://prestodb.io/docs/current/admin/resource-groups.html#database-resource-group-manager
  db:
    # Database URL to load configuration from, i.e. "resource-groups.config-db-url" value
    url: jdbc:mysql://mysql:3306/resource_groups?user=${ENV:RESOURCE_GROUP_USER}&password=${ENV:RESOURCE_GROUP_PASSWORD}
    # Maximum time period to accept queries after refresh failures, i.e. "resource-groups.max-refresh-interval"
    maxRefreshInterval: 1h
    # Enable exact_match_source_selectors table usage, i.e. "resource-groups.exact-match-selector-enabled" value
    exactMatchSelectorEnabled: false

# Metrics endpoint to export JMX metrics in Prometheus format
metrics:
  enabled: false
  port: 9090
  # Path to JMX exporter JAR file
  javaagent: /usr/lib/presto/utils/jmx_prometheus_javaagent.jar
  # JMX Exporter config, see https://github.com/prometheus/jmx_exporter#configuration for available options
  config:
    rules:
      - pattern: ".*"
